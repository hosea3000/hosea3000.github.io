[{"categories":null,"content":"⚠️ golang 没有枚举类型 但是我们可以通过类型别名实现一个简单版本的 enmu package main import \"fmt\" type LogLevel int const ( INFO LogLevel = iota WARNING ERROR ) func (l LogLevel) String() string { s := []string{\"INFO\", \"WARNING\", \"ERROR\"} return s[l] } func test(level LogLevel) { fmt.Println(level) } func main() { test(ERROR) } 我们可以为类型别名实现 String() 打印的时候 golang 会默认调用，所以打印出来是我们要的字符串值。 这里只是使用了类型别名。但是实际上还是 int 类型， 方法调用者还是能传其它的 int 值进来。 暂时没有好的解决办法 不过已经很好了，从方法的签名反应出类型的枚举值 ","date":"2022-10-18","objectID":"/note/golang/enum/:0:0","tags":null,"title":"枚举","uri":"/note/golang/enum/"},{"categories":null,"content":"使用 go:generate 自动生成 string 方法 如果每次都要自己写类型的string实现很容易出错，也很麻烦。 官方提供了 stringer 专门用来做这个事情 package main import \"fmt\" type Pill int const ( Placebo Pill = iota Aspirin Ibuprofen Paracetamol ) //go:generate stringer -type=Pill func main() { fmt.Println(\"Hello, world.\", Aspirin) } 执行命令 go generate会自动为你生成 pill_string.go 实现 string() 方法 ","date":"2022-10-18","objectID":"/note/golang/enum/:0:1","tags":null,"title":"枚举","uri":"/note/golang/enum/"},{"categories":null,"content":"为什么 go 没有 enum 类型？ golang 的数据类型都有零值。 假如我们写了一个枚举类型的值是 [1，2，3，4，5] 那么他的零值是多少呢？ ","date":"2022-10-18","objectID":"/note/golang/enum/:0:2","tags":null,"title":"枚举","uri":"/note/golang/enum/"},{"categories":null,"content":"运行面板 docker run -d -p 9000:9000 --restart=always -v /var/run/docker.sock:/var/run/docker.sock --name prtainer-test docker.io/portainer/portainer ","date":"2022-10-18","objectID":"/note/portainer/:0:1","tags":null,"title":"Portainer 的使用","uri":"/note/portainer/"},{"categories":null,"content":"安装 Agent 在Portainer的架构中，管理节点是Portainer Server，被管理节点通过部署Agent来与Server通信。 按照网络环境的不同，Portainer将Agent分为两种： Portainer Agent 和 Edge Agent。 Portainer Agent：当被管理服务器位于公网时，有公网IP，Server可以主动与其连接。此时，在被管理服务器上部署Portainer Agent来实现与Server之间的通信。 https://docs.portainer.io/v/be-2.12/start/install/agent/docker/linux Edge Agent： 当被管理服务器位于内网时，Server无法主动与其连接。此时，需要在被管理服务器上部署Edge Agent，Edge Agent会周期性的从Server中获取需要执行的任务，从而实现与Server之间的通信。 https://docs.portainer.io/v/be-2.12/start/install/agent/edge 说白了就是一个主动一个被动 安装 agent docker run -d -p 9001:9001 --name portainer_agent --restart=always -v /var/run/docker.sock:/var/run/docker.sock -v /var/lib/docker/volumes:/var/lib/docker/volumes portainer/agent:2.12.1 ","date":"2022-10-18","objectID":"/note/portainer/:0:2","tags":null,"title":"Portainer 的使用","uri":"/note/portainer/"},{"categories":null,"content":"配置 node 在面板中增加 endpoint 之后就可以使用了 ","date":"2022-10-18","objectID":"/note/portainer/:0:3","tags":null,"title":"Portainer 的使用","uri":"/note/portainer/"},{"categories":null,"content":"配置参数可变， 如何设计让未来增加方便， 好维护 package main import ( \"fmt\" \"time\" ) type Conn struct { Host string Port int Timeout time.Duration Retry int } func NewConn( host string, // 必填参数 fs ...func(*Conn), // 可选可变参数 ) *Conn { conn := \u0026Conn{ Host: host, } for _, f := range fs { f(conn) } return conn } func withPort(port int) func(*Conn) { return func(c *Conn) { c.Port = port } } func withTimeout(duration time.Duration) func(*Conn) { return func(c *Conn) { c.Timeout = duration } } func withRetry(retry int) func(*Conn) { return func(c *Conn) { c.Retry = retry } } func main() { con := NewConn( \"localhost\", withRetry(3), withPort(8080), withTimeout(2*time.Second), ) fmt.Printf(\"%#v\", con) } ","date":"2022-10-18","objectID":"/note/function/:0:0","tags":null,"title":"函数式选项模式","uri":"/note/function/"},{"categories":["aaa","bbbb"],"content":"安装 oh-my-zsh apt install zsh sh -c \"$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\" // 如果速度慢可以使用 https://ghproxy.com/ ","date":"2022-10-18","objectID":"/note/first_post/:0:1","tags":["aa"],"title":"新装 Ubuntu 服务器","uri":"/note/first_post/"},{"categories":["aaa","bbbb"],"content":"安装 tmux sudo apt install tmux ","date":"2022-10-18","objectID":"/note/first_post/:0:2","tags":["aa"],"title":"新装 Ubuntu 服务器","uri":"/note/first_post/"},{"categories":["aaa","bbbb"],"content":"安装 node.js 1.替换源(16为node版本) curl -sL https://deb.nodesource.com/setup_16.x | sudo -E bash - 2. 安装 node sudo apt-get install -y nodejs 3. 安装 yarn curl -sL https://dl.yarnpkg.com/debian/pubkey.gpg | gpg --dearmor | sudo tee /usr/share/keyrings/yarnkey.gpg \u003e/dev/null echo \"deb [signed-by=/usr/share/keyrings/yarnkey.gpg] https://dl.yarnpkg.com/debian stable main\" | sudo tee /etc/apt/sources.list.d/yarn.list sudo apt-get update \u0026\u0026 sudo apt-get install yarn ","date":"2022-10-18","objectID":"/note/first_post/:0:3","tags":["aa"],"title":"新装 Ubuntu 服务器","uri":"/note/first_post/"},{"categories":["aaa","bbbb"],"content":"安装 docker 1. docker curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun 2. 安装 docker-compose sudo curl -L \"https://ghproxy.com/https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose sudo chmod +x /usr/local/bin/docker-compose docker-compose --version 怎么解决docker需要sudo才能运行的问题？ Create the docker group if it does not exist $ sudo groupadd docker Add your user to the docker group. $ sudo usermod -aG docker $USER Run the following command or Logout and login again and run (that doesn't work you may need to reboot your machine first) $ newgrp docker Check if docker can be run without root $ docker run hello-world Reboot if still got error $ reboot ","date":"2022-10-18","objectID":"/note/first_post/:0:4","tags":["aa"],"title":"新装 Ubuntu 服务器","uri":"/note/first_post/"}]