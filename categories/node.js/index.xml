<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Node.js - Category - Hosea 的个人笔记</title><link>https://hosea3000.github.io/categories/node.js/</link><description>Node.js - Category - Hosea 的个人笔记</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Fri, 21 Oct 2022 02:02:33 +0800</lastBuildDate><atom:link href="https://hosea3000.github.io/categories/node.js/" rel="self" type="application/rss+xml"/><item><title>Array</title><link>https://hosea3000.github.io/nodejs/array/</link><pubDate>Fri, 21 Oct 2022 02:02:33 +0800</pubDate><author>Hosea</author><guid>https://hosea3000.github.io/nodejs/array/</guid><description>Js 判斷對象是否為數組 ECMAScript5 中有一個現成的方法：Array.isArray() 1 2 3 4 5 6 var obj = { 1: [1], 2: [2] }, arr = [1], str = &amp;#39;1&amp;#39;; Array.isArray(obj); // return false Array.isArray(arr); // return true Array.isArray(str); // return false instanceof</description></item><item><title>decorator 装饰器</title><link>https://hosea3000.github.io/nodejs/decorator/</link><pubDate>Fri, 21 Oct 2022 02:02:33 +0800</pubDate><author>Hosea</author><guid>https://hosea3000.github.io/nodejs/decorator/</guid><description>js 目前也有类似于 Java 和 Python 的装饰器概念, 主要写法如下 1 2 3 4 5 6 7 8 9 @frozen class Foo { @configurable(false) @enumerable(true) method() {} @throttle(500) expensiveMethod() {} } 目前在 Node.js 中还无法使用这个特性, 那么他是怎么实现的呢</description></item><item><title>Express 错误处理中间件如何捕获 async 方法的异常?</title><link>https://hosea3000.github.io/nodejs/express/</link><pubDate>Fri, 21 Oct 2022 02:02:33 +0800</pubDate><author>Hosea</author><guid>https://hosea3000.github.io/nodejs/express/</guid><description><![CDATA[问题示例 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 const express = require(&#39;express&#39;); const app = express(); app.get(&#39;/&#39;, async (req, res, next) =&gt; { throw new Error(&#39;test error&#39;); }); app.use(async function (error, req, res, next) { console.log(&#39;will not print&#39;); // 这里无法捕获到错误, 关键点在于actio]]></description></item><item><title>js 中 sort 数字排序问题</title><link>https://hosea3000.github.io/nodejs/sort/</link><pubDate>Fri, 21 Oct 2022 02:02:33 +0800</pubDate><author>Hosea</author><guid>https://hosea3000.github.io/nodejs/sort/</guid><description>js 中 sort 数字排序问题 语法：arrayObject.sort(sortby)；参数 sortby 可选。规定排序顺序。必须是函数。 sort() 方法用于对数组的元素进行排</description></item><item><title>JS 中的||符号</title><link>https://hosea3000.github.io/nodejs/operator/</link><pubDate>Fri, 21 Oct 2022 02:02:33 +0800</pubDate><author>Hosea</author><guid>https://hosea3000.github.io/nodejs/operator/</guid><description>1、JS 中的||符号： 运算方法： ​ 只要“||”前面为 false,不管“||”后面是 true 还是 false，都返回“||”后面的值。 ​ 只要“||”前</description></item><item><title>Nest.js</title><link>https://hosea3000.github.io/nodejs/nestjs/</link><pubDate>Fri, 21 Oct 2022 02:02:33 +0800</pubDate><author>Hosea</author><guid>https://hosea3000.github.io/nodejs/nestjs/</guid><description>前言 分层是解决软件复杂度很好的方法，它能够降低耦合、增加复用。典型的 java 后端开发大多分为三层，几乎成了标准模式，但是 node 社区对于分层的讨论却很少</description></item><item><title>Node.js 中的异常捕获</title><link>https://hosea3000.github.io/nodejs/exception/</link><pubDate>Fri, 21 Oct 2022 02:02:33 +0800</pubDate><author>Hosea</author><guid>https://hosea3000.github.io/nodejs/exception/</guid><description>Node.js 中的异常捕获 同步代码的错误处理 同步代码中的异常使用 try{}catch 结构即可捕获处理。 1 2 3 4 5 try { throw new Error(&amp;#39;错误信息&amp;#39;); } catch (e)</description></item><item><title>Node.js 创建 webSever</title><link>https://hosea3000.github.io/nodejs/webserver/</link><pubDate>Fri, 21 Oct 2022 02:02:33 +0800</pubDate><author>Hosea</author><guid>https://hosea3000.github.io/nodejs/webserver/</guid><description><![CDATA[创建 webSever Node.js 创建 Http 服务器可以利用 http 包的 createServer 方法创建一个简单的 web 服务器 1 2 3 4 5 6 7 8 9 10 11 12 const http = require(&#39;http&#39;); const server = http.createServer((req, res) =&gt; { if (req.url === &#39;/ping&#39;) { res.end(&#39;pong&#39;); } res.end(&#39;hello web service&#39;); }); server.listen(3000, () =&gt; { console.log(&#39;http]]></description></item><item><title>Node.js 的模块机制</title><link>https://hosea3000.github.io/nodejs/module/</link><pubDate>Fri, 21 Oct 2022 02:02:33 +0800</pubDate><author>Hosea</author><guid>https://hosea3000.github.io/nodejs/module/</guid><description>Node.js 的模块机制 Node.js 在实现模块系统时采用了 CommonJS 的模块规范。 CommonJS 的模块规范分为 3 个部分： 模块引用：通过 require()方法并传入一个模块标识来引入一个</description></item><item><title>Node.js 的版本周期</title><link>https://hosea3000.github.io/nodejs/version/</link><pubDate>Fri, 21 Oct 2022 02:02:33 +0800</pubDate><author>Hosea</author><guid>https://hosea3000.github.io/nodejs/version/</guid><description>Node.js 的版本周期 术语 CURRENT：指代最新的 Node.js 版本系列（单数）。 Active：指正在积极维护和升级的版本系列，包括向后移植非破坏性功能和改进，</description></item></channel></rss>