<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>设计模式 - Category - Hosea 的个人笔记</title><link>https://hosea3000.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</link><description>设计模式 - Category - Hosea 的个人笔记</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Tue, 18 Oct 2022 22:47:41 +0800</lastBuildDate><atom:link href="https://hosea3000.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/" rel="self" type="application/rss+xml"/><item><title>单例模式</title><link>https://hosea3000.github.io/4.-single/</link><pubDate>Tue, 18 Oct 2022 22:47:41 +0800</pubDate><author>Hosea</author><guid>https://hosea3000.github.io/4.-single/</guid><description>单例模式就是为了保证一个类全局只有一个实例。且能够被外部使用。 Golang 实现 利用 lock 实现 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 package single import &amp;#34;sync&amp;#34; var lock = sync.Mutex{} type single struct {}</description></item><item><title>工厂方法模式</title><link>https://hosea3000.github.io/2.-factory-method/</link><pubDate>Tue, 18 Oct 2022 22:47:41 +0800</pubDate><author>Hosea</author><guid>https://hosea3000.github.io/2.-factory-method/</guid><description>特点： 根据工厂创建对用的产品 优点： 新增产品是新增对应的工厂和产品就好了， 不用修改原有的工厂类， 产品之间的创建逻辑解耦 缺点： 新增产品需要新增产</description></item><item><title>抽象工厂模式</title><link>https://hosea3000.github.io/3.-abstract-factory/</link><pubDate>Tue, 18 Oct 2022 22:47:41 +0800</pubDate><author>Hosea</author><guid>https://hosea3000.github.io/3.-abstract-factory/</guid><description>重点： 理解什么叫产品簇 特点： 多个工厂多个产品， 每个工厂都能生产多种产品， 但是每个工厂生产出来的同一个产品特点都不一样 优点： 新增产品是新增对应</description></item><item><title>简单工厂模式</title><link>https://hosea3000.github.io/1.-simple-factory/</link><pubDate>Tue, 18 Oct 2022 22:47:41 +0800</pubDate><author>Hosea</author><guid>https://hosea3000.github.io/1.-simple-factory/</guid><description>又叫静态方法模式(因为工厂类定义了一个静态方法) 特点： 工厂类用静态方法实现产品的创建 优点： 将创建实例与使用实例分开，使用者不必关心类对象如何</description></item></channel></rss>