<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>All Posts - Hosea 的个人笔记</title><link>https://hosea3000.github.io/posts/</link><description>All Posts | Hosea 的个人笔记</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Tue, 18 Oct 2022 22:47:41 +0800</lastBuildDate><atom:link href="https://hosea3000.github.io/posts/" rel="self" type="application/rss+xml"/><item><title>单例模式</title><link>https://hosea3000.github.io/4.-single/</link><pubDate>Tue, 18 Oct 2022 22:47:41 +0800</pubDate><author>Hosea</author><guid>https://hosea3000.github.io/4.-single/</guid><description>单例模式就是为了保证一个类全局只有一个实例。且能够被外部使用。 Golang 实现 利用 lock 实现 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 package single import &amp;#34;sync&amp;#34; var lock = sync.Mutex{} type single struct {}</description></item><item><title>工厂方法模式</title><link>https://hosea3000.github.io/2.-factory-method/</link><pubDate>Tue, 18 Oct 2022 22:47:41 +0800</pubDate><author>Hosea</author><guid>https://hosea3000.github.io/2.-factory-method/</guid><description>特点： 根据工厂创建对用的产品 优点： 新增产品是新增对应的工厂和产品就好了， 不用修改原有的工厂类， 产品之间的创建逻辑解耦 缺点： 新增产品需要新增产</description></item><item><title>抽象工厂模式</title><link>https://hosea3000.github.io/3.-abstract-factory/</link><pubDate>Tue, 18 Oct 2022 22:47:41 +0800</pubDate><author>Hosea</author><guid>https://hosea3000.github.io/3.-abstract-factory/</guid><description>重点： 理解什么叫产品簇 特点： 多个工厂多个产品， 每个工厂都能生产多种产品， 但是每个工厂生产出来的同一个产品特点都不一样 优点： 新增产品是新增对应</description></item><item><title>简单工厂模式</title><link>https://hosea3000.github.io/1.-simple-factory/</link><pubDate>Tue, 18 Oct 2022 22:47:41 +0800</pubDate><author>Hosea</author><guid>https://hosea3000.github.io/1.-simple-factory/</guid><description>又叫静态方法模式(因为工厂类定义了一个静态方法) 特点： 工厂类用静态方法实现产品的创建 优点： 将创建实例与使用实例分开，使用者不必关心类对象如何</description></item><item><title>Portainer 的使用</title><link>https://hosea3000.github.io/portainer/</link><pubDate>Tue, 18 Oct 2022 22:38:15 +0800</pubDate><author>Hosea</author><guid>https://hosea3000.github.io/portainer/</guid><description>运行面板 1 docker run -d -p 9000:9000 --restart=always -v /var/run/docker.sock:/var/run/docker.sock --name prtainer-test docker.io/portainer/portainer 安装 Agent 在Portainer的架构中，管理节点是Portainer Server，被管理节点通过部署Agent来</description></item><item><title>利用 goreleaser 发布自己的项目到 github</title><link>https://hosea3000.github.io/goreleaser/</link><pubDate>Tue, 18 Oct 2022 19:12:11 +0800</pubDate><author>Hosea</author><guid>https://hosea3000.github.io/goreleaser/</guid><description>经常会用 golang 做一些工具并开源给大家用。如果自己发版，太麻烦。 而且还要交叉编译各个平台。 在网上找到了一个golang的发布工具，只需要在本地输入</description></item><item><title>新装 Ubuntu 服务器</title><link>https://hosea3000.github.io/%E6%9C%8D%E5%8A%A1%E5%99%A8/</link><pubDate>Tue, 18 Oct 2022 19:12:11 +0800</pubDate><author>Hosea</author><guid>https://hosea3000.github.io/%E6%9C%8D%E5%8A%A1%E5%99%A8/</guid><description>安装 oh-my-zsh 1 2 3 4 5 apt install zsh sh -c &amp;#34;$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&amp;#34; // 如果速度慢可以使用 https://ghproxy.com/ 安装 tmux 1 sudo apt install tmux 安装 node.js 1 2 3 4 5 6 7 8 9 10 11 12 1.替换源(16为node版本) curl -sL https://deb.nodesource.com/setup_16.x |</description></item></channel></rss>